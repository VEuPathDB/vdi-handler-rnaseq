#!/usr/bin/perl

use strict;
use DBI;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use RnaSeqHandlerCommon;
use File::Copy;

my @envVars = ('DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_PLATFORM', 'DB_USER', 'DB_PASS', 'USER_DATASETS_DIR');

sub usage {
  my $envStr = join(", \$", @envVars);

  die "
Install an RNASeq user dataset into a website.

The dataset will include one or more .txt files (FPKM), and, optionally, parallel .bw files.  The
former are installed into the AppDB;  the latter into web service files.

Usage: install-data user_dataset_id filesDir
Where:
  user_dataset_id:  a user dataset id
  filesDir:         directory containing data files.  See import script for details.

ASSUMES THE DATASET IS PRE-VALIDATED DURING IMPORT.  See the import script.

Env: \$$envStr
";
}

my ($userDatasetId, $filesDir) = @ARGV;

usage() unless scalar(@ARGV) == 2;

for my $envVar (@envVars) { die "Missing env variable '$envVar'\n" unless $ENV{$envVar}; }

####################################################
# initialization for installing bw files to file sys
####################################################
die "User dataset ID '$userDatasetId' already exists in webServices directory" if -e "$ENV{USER_DATASETS_DIR}/$userDatasetId";

##################################################
# initialization for installing txt files to appdb
##################################################
my $dbh = DBI->connect("dbi:$ENV{DB_PLATFORM}:database=$ENV{DB_NAME};host=$ENV{DB_HOST};port=$ENV{DB_PORT}", $ENV{DB_USER}, $ENV{DB_PASS})
    || die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = 1;
my %profileSetIds;
my $orderNum = 1;
my $count = 0;
my %geneIds;
my ($panPkSh, $psPkSh, $insertProfileSet, $updateProfileSetUnit, $insertProtocolAppNode, $insertNaFeatureExpression, $unswitchProfiles)  = initializePreparedStmts();

#################################################################################
# iterate through lines of manifest file, processing each file (either txt or bw)
#################################################################################

open my $fh, $MANIFEST_FILE or die "Can't open manifest file '$MANIFEST_FILE' for reading:  $!";

# manifest file columns:
#    sampleName fileName strandInfo ('unstranded', 'sense' or 'antisense')
while(my ($panName, $filename, $strand) = readAndValidateManifestLine($fh, $filesDir)) {
  if ($filename =~ /(.+)\.txt$/) {
    installTxtFile($userDatasetId, $panName, $filename, $strand);
  } else {
    installBwFile($userDatasetId, $filename);
  }
}

######################################
# do final processing for appdb
######################################
$unswitchProfiles->execute($userDatasetId);
$dbh->commit;



################################ subroutines   ##################################################################

sub initializePreparedStmts {

  my $panPkSql = "select ApiDBUserDatasets.UD_ProtocolAppNode_sq.nextval from dual";
  my $panPkSh = $dbh->prepare($panPkSql);

  my $psPkSql = "select ApiDBUserDatasets.UD_ProfileSet_sq.nextval from dual";
  my $psPkSh = $dbh->prepare($psPkSql);

  my $insertProfileSet = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_ProfileSet
    (user_dataset_id, profile_set_id, name)
    VALUES (?,?,?)
EOF

  my $updateProfileSetUnit = $dbh->prepare(<<EOF);
    UPDATE apidbUserDatasets.UD_ProfileSet
    SET unit = ?
    WHERE profile_set_id = ?
EOF

  my $insertProtocolAppNode = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_ProtocolAppNode
    (protocol_app_node_id, profile_set_id, name, node_order_num)
    VALUES (?,?,?,?)
EOF

  my $insertNaFeatureExpression = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_NaFeatureExpression
    (na_feat_expression_id, protocol_app_node_id, na_feature_id, value)
    VALUES (ApiDBUserDatasets.UD_NaFeatureExpression_sq.nextval,?,?,?)
EOF

  # query to switch the sense of stranded data if sense.median < antisense.median
  my $unswitchProfiles = $dbh->prepare(<<EOF);
update apidbUserDatasets.ud_ProfileSet
set name = case name
             when 'sense' then 'antisense'
             when 'antisense' then 'sense'
             else name
           end
where user_dataset_id = ?
  and user_dataset_id
      in (select sense.user_dataset_id
          from (select ps.user_dataset_id, median(nfe.value) as median
                from apidbUserDatasets.ud_NAFeatureExpression nfe,
                     apidbUserDatasets.ud_ProfileSet ps,
                     apidbUserDatasets.ud_ProtocolAppNode pan
                where ps.name = 'sense'
                  and ps.profile_set_id = pan.profile_set_id
                  and pan.protocol_app_node_id = nfe.protocol_app_node_id
                group by ps.user_dataset_id, ps.name) sense,
               (select ps.user_dataset_id, median(nfe.value) as median
                from apidbUserDatasets.ud_NAFeatureExpression nfe,
                     apidbUserDatasets.ud_ProfileSet ps,
                     apidbUserDatasets.ud_ProtocolAppNode pan
                where ps.name = 'antisense'
                  and ps.profile_set_id = pan.profile_set_id
                  and pan.protocol_app_node_id = nfe.protocol_app_node_id
                group by ps.user_dataset_id, ps.name) antisense
          where sense.user_dataset_id = antisense.user_dataset_id
            and sense.median < antisense.median)
EOF

    return ($panPkSh, $psPkSh, $insertProfileSet, $updateProfileSetUnit, $insertProtocolAppNode, $insertNaFeatureExpression, $unswitchProfiles);

}

sub installTxtFile {
  my ($userDatasetId, $panName, $filename, $strand) = @_;

  my $psId;
  if ($profileSetIds{$strand}) {
    $psId = $profileSetIds{$strand};
  }
  else {
    $psPkSh->execute();
    ($psId) = $psPkSh->fetchrow_array();

    $insertProfileSet->execute($userDatasetId, $psId, $strand);

    $profileSetIds{$strand} = $psId;
  }

  $panPkSh->execute();
  my ($panId) = $panPkSh->fetchrow_array();

  $insertProtocolAppNode->execute($panId, $psId, $panName, $orderNum);

  my ($idIndex, $fpkmIndex);
  open(DAT, $filename) or die "Cannot open file $filename for reading: $!";

  # check header to distinguish file type
  my $unit;
  my $header = <DAT>;
  chomp($header);

  if ($header eq "tracking_id\tclass_code\tnearest_ref_id\tgene_id\tgene_short_name\ttss_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status") {
    # Cufflinks FPKM file
    $idIndex = 0;
    $fpkmIndex = 9;
    $unit = "FPKM";
  } elsif ($header eq "gene_id\tFPKM") {
    # FPKMtool file
    $idIndex = 0;
    $fpkmIndex = 1;
    $unit = "FPKM";
  } elsif ($header eq "gene_id\tTPM") {
    # TPMtool file
    $idIndex = 0;
    $fpkmIndex = 1;
    $unit = "TPM";
  } else {
    validationError("Unrecognized header record. Not a valid transcript abundance file. File: $filename");
  }

  $updateProfileSetUnit->execute($unit, $psId);

  while(<DAT>) {
    chomp;

    my @a = split(/\t/, $_);

    my $sourceId = $a[$idIndex];
    my $fpkm = $a[$fpkmIndex];

    next unless($sourceId);

    unless(%geneIds) {
      &makeGeneSourceIdMapping($sourceId, $dbh); # initialize all mapping of all source_ids for this organism.
    }

    my $naFeatureId = $geneIds{$sourceId};
    unless($naFeatureId) {
      print "WARN: Could not find an na_feature_id for source_id $sourceId";
      next;
    }


    $insertNaFeatureExpression->execute($panId, $naFeatureId, $fpkm);

    $dbh->commit if ($count++ % 1000 == 0);    
  }

  $dbh->commit;
  $orderNum++;
}

sub makeGeneSourceIdMapping {
  my ($sourceId, $dbh) = @_;

  my $sql = "select source_id, na_feature_id from apidbtuning.geneattributes where organism in (select organism from apidbtuning.geneattributes where source_id = '$sourceId')";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($sourceId, $naFeatureId) = $sh->fetchrow_array()) {
    $geneIds{$sourceId} = $naFeatureId;
  }
  $sh->finish();
}

sub installBwFile {
  my ($userDatasetId, $bwFile) = @_;

  # initialize dir first time through
  mkdir("$ENV{USER_DATASETS_DIR}/$userDatasetId") || die "Can't create user dataset directory '$ENV{USER_DATASETS_DIR}/$userDatasetId' $!" unless -d "$ENV{USER_DATASETS_DIR}/$userDatasetId";

  copy($bwFile, "$ENV{USER_DATASETS_DIR}/$userDatasetId") or die "Copy of '$bwFile' to '$ENV{USER_DATASETS_DIR}/$userDatasetId' failed: $!";
}

sub validationError {
  my ($msg) = @_;

  print STDOUT "$msg\n";
  exit($VALIDATION_ERR_CODE);
}


